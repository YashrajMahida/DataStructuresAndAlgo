public class DLinkList {
	
		  public int i;
		  public DLinkList next;
		  public DLinkList previous;

		  public DLinkList(int id) {
		    i = id;
		  }

		  public String toString() {
		    return "{" + i + "} ";
		  }
		}

		class DoublyLinkedList {
		  private DLinkList first;
		  private DLinkList last;

		  public DoublyLinkedList() {
		    first = null;
		    last = null;
		  }

		  public boolean isEmpty() {
		    return first == null;
		  }

		  public void insertFirst(int dd) {
			  DLinkList newLink = new DLinkList(dd);
		    if (isEmpty()){
		      last = newLink;
		    }else{
		      first.previous = newLink;
		    }
		    newLink.next = first;
		    first = newLink;
		  }

		  public void insertLast(int dd) {
			  DLinkList newLink = new DLinkList(dd);
		    if (isEmpty()){
		      first = newLink;
		    }else {
		      last.next = newLink;
		      newLink.previous = last;
		    }
		    last = newLink;
		  }

		  public DLinkList deleteFirst() {
			  DLinkList temp = first;
		    if (first.next == null){
		      last = null;
		    }else{
		      first.next.previous = null;
		    }
		    first = first.next;
		    return temp;
		  }

		  public DLinkList deleteLast() {
			  DLinkList temp = last;
		    if (first.next == null){
		      first = null;
		    }else{
		      last.previous.next = null;
		    }
		    last = last.previous;
		    return temp;
		  }

		  public boolean insertAfter(int key, int dd) {
			  DLinkList current = first;
		    while (current.i != key) {
		      current = current.next;
		      if (current == null){
		        return false;
		      }
		    }
		    DLinkList newLink = new DLinkList(dd);

		    if (current == last) {
		      newLink.next = null;
		      last = newLink;
		    } else {
		      newLink.next = current.next;

		      current.next.previous = newLink;
		    }
		    newLink.previous = current;
		    current.next = newLink;
		    return true;
		  }

		  public DLinkList deleteKey(int key) {
			  DLinkList current = first;
		    while (current.i != key) {
		      current = current.next;
		      if (current == null)
		        return null;
		    }
		    if (current == first){
		      first = current.next;
		    }else{
		      current.previous.next = current.next;
		    }
		    
		    if (current == last){
		      last = current.previous;
		    }else{
		      current.next.previous = current.previous;
		    }
		    return current;
		  }

		  public String toString() {
		    String str = "List (first-->last): ";
		    DLinkList current = first;
		    while (current != null) {
		      str += current.toString();
		      current = current.next;
		    }
		    System.out.println("");
		    System.out.print("List (last-->first): ");

		    current = last;
		    while (current != null) {
		      str += current.toString();
		      current = current.previous;
		    }
		    return str;
		  }
		}

		
